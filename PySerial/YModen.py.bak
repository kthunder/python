import os
import sys
import math 
import time
# QTserial
from PyQt5.QtSerialPort import QSerialPortInfo
from PyQt5.QtSerialPort import QSerialPort
from PyQt5.QtCore import QIODevice
from tqdm import tqdm


class YModem:
    def __init__(self):
        self.ser      = None
        self.SOH      = b'\x01' # start of 128-byte data packet
        self.STX      = b'\x02' # start of 1024-byte data packet
        self.EOT      = b'\x04' # end of transmission
        self.ACK      = b'\x06' # acknowledge
        self.NAK      = b'\x15' # negative acknowledge
        self.CAN      = b'\x18' # two of these in succession aborts transfer
        self.C        = b'\x43' # ‘C’ == 0x43, request command
        self.ABORT1   = b'\x41' # ‘A’ == 0x41, abort by user
        self.ABORT2   = b'\x61' # ‘a’ == 0x61, abort by user


    @staticmethod
    def crc16(x)->bytes:
        crc_in = 0x0000
        poly = 0x1021
        for b in x:
            if type(b) is str:  # 这里做了个判断可以直接传入字符串，但存在意义不大
                crc_in ^= (ord(b) << 8)
            else:
                crc_in ^= (b << 8)
            for i in range(8):
                if crc_in & 0x8000:
                    crc_in = (crc_in << 1) ^ poly
                else:
                    crc_in = (crc_in << 1)
        return (crc_in&0xFFFF).to_bytes(2)


    def open(self, port, baud=115200):
        ser = QSerialPort()
        ser.setPortName(port)
        ser.setBaudRate(baud)                              # 修改为你的波特率
        ser.setDataBits(QSerialPort.DataBits.Data8)        # 修改为你的数据位
        ser.setParity(QSerialPort.Parity.NoParity)         # 修改为你的奇偶校验位
        ser.setStopBits(QSerialPort.StopBits.OneStop)  # 修改为你的停止位
        ser.setFlowControl(QSerialPort.FlowControl.NoFlowControl)  # 修改为你的流控制设置
        if ser.open(QIODevice.OpenModeFlag.ReadWrite):
            self.ser = ser
            print(f'port {port} open succeed ...')
        else:
            print(f'serial {port} open failed ...')


    def close(self):
        self.ser.close()
        print(f'ser close ...')
        self.ser = None


    def write(self, data, time_out=10000) -> bool :
        self.ser.write(data)
        res = self.ser.waitForBytesWritten(time_out)
        if res:
            # print("serial write",'[', data,']')
            return True
        else:
            return False 


    def read(self, maxlen: int, time_out=5000) -> bytes:
        res = bytes()
        while maxlen > 0:
            self.ser.waitForReadyRead(0)
            temp = self.ser.read(maxlen)
            res += temp
            maxlen -= len(temp)
        # print("serial read",'[', res,']')
        return res

    @staticmethod
    def first_frame(mode, file_name, file_size):
        x = 1 if mode == 128 else 2
        
        header = bytearray([x, 0, 255])
        name = bytearray([ord(i) for i in file_name]+[0])
        size = bytearray([ord(i) for i in str(file_size)]+[0])
        space = bytearray(mode - len(name) - len(size))
        crc = YModem.crc16(name + size + space)

        frame = header + name + size + space + crc
    
        return frame

    @staticmethod
    def data_frame(mode, file_data, file_size):
        package_count = math.ceil(file_size / mode)
        x = 1 if mode == 128 else 2
        for i in range(1, package_count + 1):
            header = bytearray([x,i&0xFF,~i&0xFF])
            if i == package_count:
                data = bytearray(file_data[(i - 1) * mode:])+bytearray([0x1A]*(mode-file_size%mode))
            else:
                data = file_data[(i - 1) * mode: i * mode]
            crc = YModem.crc16(data)
            frame = header + data + crc
            yield frame


    @staticmethod
    def last_frame(mode):
        x = 1 if mode == 128 else 2
        frame = bytearray([x, 0, 255]+[0]*mode+[0,0])
        return frame


    def send(self, file_path, mode=128):
        if not os.path.exists(file_path):
            print('file is not found')
            return False

        file_data = bytes()
        with open(file_path, 'rb') as f:
            file_data = f.read()
        
        name = os.path.basename(file_path)
        file_size = os.path.getsize(file_path)

        first_frame = YModem.first_frame(mode, name, file_size)
        print('wait for command')
        if self.read(1) == self.C:
            # print("send first frame>>>>>",first_frame[:2],first_frame[-2:])
            self.write(first_frame)
        print('wait for ACK')
        while self.read(1) != self.ACK:
            pass

        for data_frame in tqdm(YModem.data_frame(mode, file_data, file_size), total=math.ceil(file_size/mode), desc="training", unit="frame"):
            # print("send data frame>>>>>",data_frame[:2],data_frame[-2:])
            self.write(data_frame)
            if self.read(1) == self.ACK:
                continue
            else:
                return False

        self.write(self.EOT)
        print('wait for ACK')
        while self.read(1) != self.ACK:
            pass

        last_frame = YModem.last_frame(mode)
        self.write(last_frame)
        while c:=self.read(1) != self.ACK:
            pass

        print('send succeed')

    def recv(self):
        self.write(self.C)
        file_name = ''
        file_size = 0
        count = 0

        while ctr:=self.read(1):
            if ctr == self.SOH or ctr == self.STX:
                frame_len = 128 if ctr == self.SOH else 1024
                frame = self.read(frame_len+4)
                res = frame[2:].split(bytearray([0]))
                file_name = res[0]
                file_size = int(res[1])
                print(file_name)
                print(file_size)
                self.write(self.ACK)
                break
        with open('b-'+str(file_name,encoding="UTF-8"),'wb') as f:
            while ctr:=self.read(1):
                if ctr == self.SOH or ctr == self.STX:
                    frame_len = 128 if ctr == self.SOH else 1024
                    frame = self.read(frame_len+4)
                    if file_size > frame_len:
                        f.write(frame[2:2+frame_len])
                    else:
                        f.write(frame[2:2+file_size])
                    file_size -= frame_len
                elif ctr == self.EOT:
                    print('recive EOT ack')
                    self.write(self.ACK)
                    break
                count+=1
                self.write(self.ACK)
        while ctr:=self.read(1):
            if ctr == self.SOH or ctr == self.STX:
                frame_len = 128 if ctr == self.SOH else 1024
                frame = self.read(frame_len+4)
                print('send last ack')
                self.write(self.ACK)
                break
        print('recive succeed',count)

# 115200
# 230400
# 460800
# 921600

if __name__ == '__main__':
    if len(sys.argv)>=4:
        mode = sys.argv[1]
        baud = 115200*2**int(sys.argv[2])
        com = sys.argv[3]
        file = None
        if len(sys.argv)==5:
            file = sys.argv[4]

        if mode == 's':
            y_mode = YModem()
            y_mode.open(com,baud)
            y_mode.send(file)
            y_mode.close()
        elif mode == 'r':
            y_mode = YModem()
            y_mode.open(com,baud)
            y_mode.recv()
            y_mode.close()
        else:
            print("error arg")

